const dragToGoBack = {

  _options: {},

  configure(options) {
    // TODO: Add checks
     _.extend(this._options, options);
  },

  init() {
    const Draggabilly = require('draggabilly');

    // Add the handle
    $('.' + this._options.containerClass).append('<div class="' + this._options.handleClass + '"></div>');

    // Add the indicator
    $('.' + this._options.containerClass).before('<div class="' + this._options.indicatorContainerClass + '">\
      <div class="' + this._options.indicatorBackgroundClass + '"></div>\
      <div class="' + this._options.indicatorIconClass + '"></div>\
    </div>');

    // Init the draggableView
    const draggableView = new Draggabilly('.' + this._options.containerClass, {
      handle: '.' + this._options.handleClass,
      axis: 'x'
    });

    // Animate indicator icon on drag
    draggableView.on('dragMove', (event, pointer) => {
      const totalWidth = $('.' + this._options.containerClass).outerWidth();
      const thresholdWidth = totalWidth * (this._options.threshold / 100);
      const pixelsMoved = pointer.screenX;
      const opacity = pixelsMoved / thresholdWidth;
      $('.' + this._options.indicatorIconClass).css('opacity', opacity).css('left', opacity * 15);
    });

    // Deal with the end of the drag
    draggableView.on('dragEnd', (event, pointer) => {
      const totalWidth = $('.' + this._options.containerClass).outerWidth();
      const pixelsMoved = pointer.pageX;
      const percentageMoved = (pixelsMoved / totalWidth) * 100;
      if (percentageMoved < this._options.threshold) {
        // Reset
        $('.' + this._options.containerClass).animate({ left: 0 }, 100);
      } else {
        // Finish the animation
        $('.' + this._options.containerClass).animate({ left: '110%' }, 100, () => {

          // Trigger callback
          if (this._options.onComplete) this._options.onComplete();

          // Remove the indicator div
          $('.' + this._options.indicatorContainerClass).remove();
        });
      }
    });
  },

}

// Set the defaults
dragToGoBack.configure({
  threshold: 50,
  containerClass: 'drag-to-go-back',
  handleClass: 'drag-to-go-back-handle',
  indicatorContainerClass: 'drag-to-go-back-indicator-container',
  indicatorBackgroundClass: 'drag-to-go-back-indicator-background',
  indicatorIconClass: 'drag-to-go-back-indicator-icon',
  onComplete: () => {
    window.history.back();
  },
});

exports.dragToGoBack = dragToGoBack;
